import React from "react"
import IngredientsList from "./IngredientsList"
import ClaudeRecipe from "./ClaudeRecipe"
import {getRecipeFromMistral } from "../ai"

export default function Main() {

    const [ingredients, setIngredients] = React.useState(
        []
    );

    // Creates a loading state that will be used to display a loading spinner while the AI model is generating a recipe
    const [isLoading, setIsLoading] = React.useState(false);

    // Creates a recipe state that will hold the recipe generated by the AI model
    const [recipe, setRecipe] = React.useState("");

    /***
     * Using UseRef() to add the DOMNode.scrollView functionality.
     * This functionality is important when we click on the "Get a recipe" button, the page renders and scrolls usdown to the section of the page where the recipe is.
     * This should only happen when 'recipe' is not an empty string. 
     */
    const recipeSection = React.useRef(null)

    // I will apply a useEffect() hook to handle scrollIntoView() only when the recipe is not an empty string (recipe has been generated by the AI model)  and the recipeSection ref is not null.
    React.useEffect(() => {

        if(recipe !== "" && recipeSection.current !== null){

            recipeSection.current.scrollIntoView({behavior: "smooth"}) // This will make the page scroll down a bit smoothly.
        }

    }, [recipe]) // Since we are passing the recipe state into the dependency array, the effect will run whenever the recipe changes  or is updated.


    /**
     * Calls the getRecipeMistral() function and updates the recipe state with the returned recipe.
     */
    async function getRecipe() {

        // isLoading state is set to true to when starting the AI model.
        setIsLoading(true);

        try{
            const recipeMarkdown = await getRecipeFromMistral(ingredients);

            console.log(recipeMarkdown);

            setRecipe(recipeMarkdown);

        } catch(error){
            console.error(error.message);
            setRecipe(`Sorry, there was an error getting the recipe: ${error.message}. Please try again.`);

        }finally{
            setIsLoading(false);
        }
        
    }

    function addIngredient(formData) {
        // Access the ingredient value from the formData object using the ingredient name attribute from the input
        const newIngredient = formData.get("ingredient");
        
        // Update the ingredients[] state by creating a new array using the spread operator that copies the previous ingredients array and includes the new ingredient.
        setIngredients(prevIngredients => 
            [...prevIngredients, newIngredient]
        );
    }

    return (

        <main>

            <form action={addIngredient} className="add-ingredient-form">

                <input 
                    type="text"
                    placeholder="e.g. oregano"
                    aria-label="Add ingredient"
                    name="ingredient"
                />

                <button>Add ingredient</button>

            </form>

            {/* Render the IngredientsList component only if there are ingredients in the ingredients[] state */}
            {ingredients.length > 0 && 

                <IngredientsList 
                    // Create a props called ref that will pass down the recipeSection ref to the IngredientsList component.
                    ref={recipeSection}

                    //Create a props called ingredients and pass it to the IngredientsList component.
                    ingredients={ingredients} 

                    // Create a props called getRecipe and pass the function to the IngredientsList component to handle the getRecipe() function.
                    getRecipe={getRecipe} 
                />
            }

            {/* Render the ClaudeRecipe component only if there is a recipe in the recipe state */}
            {/* The ClaudeRecipe component recevices the AI-generated recipe content from the recipe state. */}
            {/* Passing the isLoading state to the ClaudeRecipe component to display the loading spinner. */}
            {(recipe || isLoading) && <ClaudeRecipe recipe={recipe} isLoading={isLoading}/>}

        </main>
    )
}
